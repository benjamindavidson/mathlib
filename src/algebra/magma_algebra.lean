/-
Copyright (c) 2021 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import algebra.non_associative.basic
import linear_algebra.finsupp

/-!
# Magma algebras

If apply the construction of the group algebra but to a magma rather than a group, we obtain an
algebra which is neither unital nor associative in general, the so-called magma algebra.

Although we cannot say much about such algebras since they sit in a very general class, they are
useful for this same reason. In particular they can be used to construct free functors for
categories of non-associative algebras, e.g., free Lie algebras.

## Main definitions

  * `magma_algebra`
  * `magma_algebra.na_algebra`
  * `magma_algebra.lift`

## Tags

magma algebra, non-associative algebra
-/

universes u v w w₁

noncomputable theory

section magma_algebra

variables (R : Type u) (M : Type v) [semiring R]

/-- The magma algebra over a semiring `R` generated by the magma `M`. It is the type of finite
formal `R`-linear combinations of terms of `M`, endowed with the convolution product. -/
@[derive [inhabited, add_comm_monoid, has_coe_to_fun]]
def magma_algebra := M →₀ R

namespace magma_algebra

variables {R M}

instance : semimodule R (magma_algebra R M) := finsupp.semimodule M R

variables [has_mul M]

open finsupp

instance : has_mul (magma_algebra R M) :=
⟨λ a b, a.sum $ λ m₁ t₁, b.sum $ λ m₂ t₂, single (m₁ * m₂) (t₁ * t₂)⟩

lemma mul_def {a b : magma_algebra R M} :
  a * b = a.sum (λ m₁ t₁, b.sum $ λ m₂ t₂, single (m₁ * m₂) (t₁ * t₂)) :=
rfl

instance : distrib (magma_algebra R M) :=
{ mul           := (*),
  add           := (+),
  left_distrib  := λ a b c, by simp only [mul_def, sum_add_index, mul_add, mul_zero, single_zero,
    single_add, eq_self_iff_true, forall_true_iff, forall_3_true_iff, sum_add],
  right_distrib := λ a b c, by simp only [mul_def, sum_add_index, add_mul, zero_mul, single_zero,
    single_add, eq_self_iff_true, forall_true_iff, forall_3_true_iff, sum_add, sum_zero],
  .. finsupp.add_comm_monoid }

instance : mul_zero_class (magma_algebra R M) :=
{ zero      := 0,
  mul       := (*),
  zero_mul  := assume f, by simp only [mul_def, sum_zero_index],
  mul_zero  := assume f, by simp only [mul_def, sum_zero_index, sum_zero], }

instance : na_semiring (magma_algebra R M) :=
{ ..(infer_instance : add_comm_monoid _),
  ..(infer_instance : distrib _),
  ..(infer_instance : mul_zero_class _), }

lemma smul_mul_assoc (t : R) (a b : magma_algebra R M) : (t • a) * b = t • (a * b) :=
begin
  ext,
  simp only [mul_def, mul_sum, smul_apply, sum_smul_index, implies_true_iff, eq_self_iff_true,
    single_zero, sum_apply, smul_eq_mul, single_apply, mul_ite, mul_zero, sum_zero, zero_mul,
    mul_assoc],
end

/-- If the coefficients are commutative amongst themselves, they also commute with the
multiplication. -/
lemma mul_smul_comm {R : Type u} [comm_semiring R] (t : R) (a b : magma_algebra R M) :
  a * (t • b) = t • (a * b) :=
begin
  ext,
  simp only [mul_def, mul_sum, smul_apply, sum_smul_index, implies_true_iff, eq_self_iff_true,
    single_zero, sum_apply, smul_eq_mul, single_apply, mul_ite, mul_zero, mul_left_comm],
end

instance {R : Type u} [comm_semiring R] : na_algebra R (magma_algebra R M) :=
{ smul_mul_assoc' := smul_mul_assoc,
  mul_smul_comm'  := mul_smul_comm,
  ..(infer_instance : semimodule R _) }

variables (R)

/-- The embedding of a magma into its magma algebra. -/
def of : mul_hom M (magma_algebra R M) :=
{ to_fun   := λ m, single m 1,
  map_mul' := λ m₁ m₂, by simp only [mul_def, mul_one, sum_single_index, single_eq_zero, mul_zero] }

@[simp] lemma of_apply (m : M) : of R m = single m 1 := rfl

/-- The universal property of the magma algebra expressing its adjointness. -/
def lift (R : Type u) [comm_semiring R] {A : Type w} [na_semiring A] [na_algebra R A] :
  mul_hom M A ≃ na_algebra_hom R (magma_algebra R M) A :=
{ to_fun    := λ f,
    { to_fun    := λ a, a.sum (λ m t, t • f m),
      map_add'  := sorry,
      map_smul' := sorry,
      map_mul'  := sorry, },
  inv_fun   := λ F, F.to_mul_hom.comp (of R),
  left_inv  := sorry,
  right_inv := sorry, }

end magma_algebra

end magma_algebra
